const path = require("path");

const {MongoClient, ObjectId} = require("mongodb");

const express = require('express');
const session = require('express-session');
const passport = require('passport');
const LocalStrategy = require('passport-local').Strategy;

initialize(passport);

const app = express();
const dir  = "public/"
const port = process.env.PORT || 3000
const mongoURI = "mongodb+srv://yoyo17233:databasepassword@a3db.nouer.mongodb.net/?retryWrites=true&w=majority&appName=a3db";
const client = new MongoClient(mongoURI);

app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(session({
  secret: "secret",
  resave: false,
  saveUninitialized: false

}));

app.use(passport.initialize())
app.use(passport.session())

async function connectDB() {
    try {
        await client.connect();
        console.log("Connected to MongoDB âœ…");
        // await solveCollection.deleteMany({}); UNCOMMENTING THIS LINE WILL DELETE ALL SOLVES IN THE DB
    }   
    catch (err) {
        console.error("MongoDB Connection Error:", err);
    }
}

connectDB();
const db = client.db("a3database");
const userCollection = db.collection("users");
const solveCollection = db.collection("solves");

app.get("/", (req, res) => {
  console.log("Ok the function was actually called")
  if(req.isAuthenticated()){
    console.log("base - user authed, sending to timer.html")
    return res.sendFile(path.join(__dirname, 'public', 'timer.html'));
  }
  else{
    console.log("base - user not authed, timer.html")
    return res.sendFile(path.join(__dirname, 'public', 'index.html'));
  }
});

app.get("/timer.html", (req, res) => {
  console.log("Ok the function was actually called")
  if(req.isAuthenticated()){
    console.log("base - user authed, sending to timer.html")
    return res.sendFile(path.join(__dirname, 'public', 'timer.html'));
  }
  else{
    console.log("base - user not authed, timer.html")
    return res.sendFile(path.join(__dirname, 'public', 'index.html'));
  }
});

app.get("/data.html", (req, res) => {
  console.log("Ok the function was actually called")
  if(req.isAuthenticated()){
    console.log("base - user authed, sending to timer.html")
    return res.sendFile(path.join(__dirname, 'public', 'data.html'));
  }
  else{
    console.log("base - user not authed, timer.html")
    return res.sendFile(path.join(__dirname, 'public', 'index.html'));
  }
});

app.listen(port, () => {
    console.log(`Server running on http://localhost:${port}`);
});

app.post("/data", async (req, res) => {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: 'User not authenticated' });
    }
    
    const userId = req.user._id;
    
    const dataToInsert = {
      ...req.body,   
      userId: userId, 
      status: 'OK'
    };

    const result = await solveCollection.insertOne(dataToInsert);
    res.status(201).json(result);

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.get("/data", async (req, res) => {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: 'User not authenticated' });
    }

    const user = await userCollection.findOne({ _id: new ObjectId(req.user._id) });
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    const solves = await solveCollection.find({ userId: user._id }).toArray();

    res.status(200).json({ user, solves });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/update", async (req, res) => {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: 'User not authenticated' });
    }
    
    const userId = req.user._id;

    const result = await solveCollection.find({ userId: userId }).toArray();

    res.status(201).json(result);

  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/delete", async (req, res) => {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: 'User not authenticated' });
    }

    const result = await solveCollection.deleteOne({ _id: new ObjectId(req.body.id) });

    if (result.deletedCount === 1) {
      return res.status(200).json({ message: 'Solve deleted successfully' });
    }

    res.status(404).json({ error: 'Solve not found or already deleted' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/updateSolve", async (req, res) => {
  try {
    if (!req.isAuthenticated()) {
      return res.status(401).json({ error: 'User not authenticated' });
    }

    const result = await solveCollection.updateOne(
      { _id: new ObjectId(req.body.id) }, 
      { $set: { status: req.body.status } }           
    );

    if (result.matchedCount === 0) {
      return res.status(404).json({ error: 'Solve not found' });
    }

    res.status(200).json({ message: 'Solve updated successfully' });
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.post("/login", passport.authenticate('local', {
  successRedirect: '/timer.html',
  failureRedirect: '/login.html?success=false'
}));

app.post('/logout', function(req, res, next){
  req.logout(function(err) {
    if (err) { return next(err); }
    res.redirect('/');
  });
});

app.post("/register", async (req, res) => {
  try {
    const user = await userCollection.findOne({ email: req.body.email })
    if(user){
      return res.redirect('/register.html?success=false');
    }
    const result = await userCollection.insertOne({email: req.body.email, password: req.body.password});
    res.redirect('/login.html?success=true');}
  catch (err) {
    res.status(500).json({ error: err.message });
  }
});

app.use(express.static(dir));

// Passport functions

function initialize(passport){
  const authUser = async (email, password, done) => {
    var user;
    try {
      user = await userCollection.findOne({ email: email });
    }
    catch(err){
      console.log("cannot find user for some reason");
    }
    if(user == null){
      return done(null, false, {message: 'No user with that email'});
    }
    if (password == user.password){
      done(null, user);
    }
    else{
      return done(null, false, {message: 'Password Incorrect'});
    }
  }
  passport.use(new LocalStrategy({usernameField: 'email'}, authUser));
  passport.serializeUser((user, done) => done(null, user._id.toString()));
  passport.deserializeUser(async (id, done) => {
    try {
      const user = await userCollection.findOne({ _id: new ObjectId(id) });
      done(null, user);
    } 
    catch (err) {
      done(err);
    }
  });
}

app.get("/test", (req, res) => {
  console.log("Session:", req.session);
  console.log("User:", req.user);
  console.log("Authenticated:", req.isAuthenticated?.());
  res.json({ session: req.session, user: req.user, authenticated: req.isAuthenticated?.() });
});